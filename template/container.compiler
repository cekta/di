<?= '<?php' . PHP_EOL; ?>

declare(strict_types=1);

<?php if (!empty($namespace)) { ?>namespace <?= $namespace ?>; <?php } ?>

class <?= $class ?> implements \Psr\Container\ContainerInterface
{
    private array $params;
    private array $alias;
    private array $definitions;
    private array $containers;

    public function __construct(array $params, array $alias, array $definitions)
    {
        $this->params = $params;
        $this->alias = $alias;
        $this->definitions = $definitions;
        $this->containers = <?= var_export(array_keys($containers)) ?>;
    }

    public function get($name)
    {
        return $this->params[$name] ?? match($name) {
<?php foreach(array_keys($alias) as $key) { ?>
            <?= var_export($key) ?> => $this->params[$name] = $this->get($this->alias[$name]),
<?php } ?>
<?php foreach(array_keys($definitions) as $key) { ?>
            <?= var_export($key) ?> => $this->params[$name] = $this->definitions[$name]($this),
<?php } ?>
<?php foreach($containers as $key => $value) { ?>
           <?= var_export($key) ?> => $this->params[$name] = <?= $value ?>,
<?php } ?>
           default => throw new \Cekta\DI\Exception\NotFound($name),
       };
    }

    public function has($name)
    {
        return array_key_exists($name, $this->params)
            || array_key_exists($name, $this->alias)
            || array_key_exists($name, $this->definitions)
            || in_array($name, $this->containers);
    }
}
